(defcfg
process-unmapped-keys yes
)

(defalias 
  l_qw (layer-switch base)
  l_dh (layer-switch colemak)
)

(defalias
  cpy C-c
  pst C-v
  cut C-x
  udo C-z
  all C-a
  fnd C-f
  ;;bk Back
  ;;fw Forward
  wfw C-right
  wbk C-left
)

(defalias
  ;; toggle layer aliases
  num (layer-toggle numbers)
  anm (tap-hold-release 200 200 f @num)
  qanm (tap-hold-release 200 200 e @num)
)

(defalias
  ext  (layer-toggle extend) ;; Bind 'ext' to the Extend Layer
  sym  (layer-toggle sym)
  qsym  (layer-toggle qsym)
  syl (tap-hold-release 200 200 a @sym)
  qsyl (tap-hold-release 200 200 g @qsym)
  s_ S--
  s{ S-[
  s} S-]
  s| S-\
  tb A-tab
  sa C-a
  mu (mwheel-up 100 240)
  md (mwheel-down 100 240)
)

(defalias
  os2 (one-shot-press 500 lctl)
  sc (tap-hold 0 200 @os2 lsft)
)

(defalias
  s! S-1
  s@ S-2
  s# S-3
  s$ S-4
  s% S-5
  s^ S-6
  s& S-7
  s~ S-`
  s* S-8
  sb S-9
  sp S-0
  sau (unicode ↑)
  sad (unicode ↓)
)
(defvar
  ;; Note: consider using different time values for your different fingers.
  ;; For example, your pinkies might be slower to release keys and index
  ;; fingers faster.
  tap-time 200
  hold-time 130

  left-hand-keys (
    q w e r t
    a s d f g
    z x c v b
  )
  left-hand-keys-col (
    q w f p k
    a r s t g
    z x c d b
  )
  right-hand-keys (
    y u i o p
    h j k l ;
    n m , . /
  )

  right-hand-keys-col (
    j l u y ;
    m n e i o
    v h , . /
  )
  full-hand-keys (
    q w e r t y u i o p
    a s d f g h j k l ;
    z x c v b n m , . /
  )
  full-hand-keys-col (
    q w f p k j l u y ;
    a r s t g m n e i o
    z x c d b v h , . /
  )
)

(deffakekeys
  to-base (layer-switch base)
)

(deffakekeys
  to-colemak (layer-switch colemak)
)

(defalias
  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 20)
  )

  z (tap-hold-release-keys $tap-time $hold-time (multi z @tap) lctl $left-hand-keys)
  x (tap-hold-release-keys $tap-time $hold-time (multi x @tap) lalt $left-hand-keys)
  c (tap-hold-release-keys $tap-time $hold-time (multi c @tap) lsft $left-hand-keys)
  v (tap-hold-release-keys $tap-time $hold-time (multi v @tap) lmet $left-hand-keys)
  ;;shif (tap-hold-release $tap-time $hold-time (multi esc @tap) @csk)
  ;;spc (tap-hold-release-keys $tap-time $hold-time (multi spc @tap) (layer-toggle sym) $full-hand-keys)
  . (tap-hold-release-keys $tap-time $hold-time (multi . @tap) ralt $right-hand-keys)
  , (tap-hold-release-keys $tap-time $hold-time (multi , @tap) rsft $right-hand-keys)
  m (tap-hold-release-keys $tap-time $hold-time (multi m @tap) rmet $right-hand-keys)
  / (tap-hold-release-keys $tap-time $hold-time (multi / @tap) rctl $right-hand-keys)
)


(defalias
  tapc (multi
    (layer-switch colemak_nomods)
    (on-idle-fakekey to-colemak tap 20)
  )
  

  zc (tap-hold-release-keys $tap-time $hold-time (multi z @tapc) lctl $left-hand-keys)
  xc (tap-hold-release-keys $tap-time $hold-time (multi x @tapc) lalt $left-hand-keys)
  cc (tap-hold-release-keys $tap-time $hold-time (multi c @tapc) lsft $left-hand-keys)
  vc (tap-hold-release-keys $tap-time $hold-time (multi v @tapc) lmet $left-hand-keys)

  ;;shifc (tap-hold-release $tap-time $hold-time (multi esc @tapc) @csk)
  .c (tap-hold-release-keys $tap-time $hold-time (multi . @tapc) ralt $right-hand-keys)
  ,c (tap-hold-release-keys $tap-time $hold-time (multi , @tapc) rsft $right-hand-keys)
  hc (tap-hold-release-keys $tap-time $hold-time (multi h @tapc) rmet $right-hand-keys)
  /c (tap-hold-release-keys $tap-time $hold-time (multi / @tapc) rctl $right-hand-keys)
)

;;(defalias
;;  ext (tap-hold $tap-time $hold-time esc (layer-while-held extend))
;;  ;; cap (tap-hold $tap-time $hold-time esc (layer-while-held vim-nav))
;;  zc (switch ((key-timing 1 less-than $tap-time)) z break () (tap-hold $tap-time $hold-time z lctl) break)
;;  xc (switch ((key-timing 1 less-than $tap-time)) x break () (tap-hold $tap-time $hold-time x lalt) break)
;;  cc (switch ((key-timing 1 less-than $tap-time)) c break () (tap-hold $tap-time $hold-time c lsft) break)
;;  vc (switch ((key-timing 1 less-than $tap-time)) v break () (tap-hold $tap-time $hold-time v lmet) break)
;;  hc (switch ((key-timing 1 less-than $tap-time)) h break () (tap-hold $tap-time $hold-time h rmet) break)
;;  ,c (switch ((key-timing 1 less-than $tap-time)) , break () (tap-hold $tap-time $hold-time , rsft) break)
;;  .c (switch ((key-timing 1 less-than $tap-time)) . break () (tap-hold $tap-time $hold-time . ralt) break)
;;  /c (switch ((key-timing 1 less-than $tap-time)) / break () (tap-hold $tap-time $hold-time / rctl) break)
;;)
;;
;;(defalias
;;  ;; cap (tap-hold $tap-time $hold-time esc (layer-while-held vim-nav))
;;  z (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time z lctl) break)
;;  x (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time x lalt) break)
;;  c (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time c lsft) break)
;;  v (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time v lmet) break)
;;  m (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time m rmet) break)
;;  , (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time , rsft) break)
;;  . (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time . ralt) break)
;;  / (switch ((key-timing 1 less-than $tap-time)) _ break () (tap-hold $tap-time $hold-time / rctl) break)
;;)


(defalias
    ;;asym   (tap-hold 200 200 ralt @sym)
    sspc   (tap-hold 150 150 spc @sym)
)

(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  caps a    s    d    f    g    h    j    k    l    ;    '    \                          kp4  kp5  kp6
  lsft 102d z    x    c    v    b    n    m    ,    .    /    rsft            up         kp1  kp2  kp3  kprt lctl lmet lalt           spc                 ralt rmet cmp  rctl       left down rght  kp0  kp.
)

(deflayer base
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    @qanm    r    t    y    u    i    o    p    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  @ext a    s    d    f    @qsyl    h    j    k    l    ;    '    \                          kp4  kp5  kp6
  lsft 102d @z    @x    @c    @v    b    n    @m    @,    @.    @/    rsft            up         kp1  kp2  kp3  kprt
  lctl lmet lalt           spc                 @ext rmet cmp  rctl       left down rght  kp0  kp.
)

(deflayer colemak
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    @anm    p    g    j    l    u    y    ;    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  @ext @syl    r    s    t    d    m    n    e    i    o    '    \                          kp4  kp5  kp6
  lsft / @zc    @xc    @cc    @vc    b    k    @hc    @,c    @.c    @/c    rsft            up         kp1  kp2  kp3  kprt
  lctl lmet lalt           spc                 @ext rmet cmp  rctl       left down rght  kp0  kp.
)
;;(deflayer qwerty
;;  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
;;  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
;;  tab  q    w    e    r    t    y    u    i    o    p    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
;;  @ext a    s    d    f    g    h    j    k    l    ;    '    \                          kp4  kp5  kp6
;;  lsft 102d @z    @x    c    v    b    n    m    ,    @.    @/   rsft            up         kp1  kp2  kp3  kprt
;;  lctl lmet lalt           spc                 ralt rmet cmp  rctl       left down rght  kp0  kp.
;;)
(deflayer nomods
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  f24 a    s    d    f    g    h    j    k    l    ;    '    \                          kp4  kp5  kp6
  lsft 102d z    x    c    v    b    n    m    ,    .    /    rsft            up         kp1  kp2  kp3  kprt
  lctl lmet lalt           spc                 ralt rmet cmp  rctl       left down rght  kp0  kp.
)
(deflayer colemak_nomods
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    f    p    g    j    l    u    y    ;    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  f24 a    r    s    t    d    m    n    e    i    o    '    \                          kp4  kp5  kp6
  lsft / z    x    c    v    b    k    h    ,    .    /    rsft            up         kp1  kp2  kp3  kprt
  lctl lmet lalt           spc                 ralt rmet cmp  rctl       left down rght  kp0  kp.
)

;;(deflayer extend
;;  _        play rewind previoussong nextsong ejectcd refresh brdn brup www mail prog1 prog2
;;  _        f1   f2   f3   f4   f5   f6   f7   f8   @s(   @s)  f11  f12  _
;;  _        esc  #    @wbk  @wfw  ins  home {    up   }    end esc slck
;;  _        @    $    !    @fnd ralt [    lft  down rght ]    caps _    _
;;  _    _     @udo    @cut    @cpy    @pst    _    -    \_    =    +    _    _
;;  _        _    _               ret            _    _    _    _
;;)
(deflayer extend
   _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    f1   f2   f3   f4   f5   f6   f7   f8   @sb   @sp  f11  f12     _     _    _    _    _    _    _    _
  @tb    esc  @mu    @wbk  @wfw  ins  home @s{    up   @s}    end esc slck    _     _    _    _    _    _    _    _
  _    @sa    @md    @fnd    @fnd ralt [    lft  down rght ]    caps    _                         _    _    _
  _    _    @udo    @cut    @cpy    @pst    _    -    @s_    =    +    @s|    _               _         _    _    _    _
  _    _    _              _                   _    _    _    _          _    _    _    _    _
)
;;(deflayer sym
;;  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
;;  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
;;  _    @l_qw    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
;;  _    @s%  @s^   @s&    @s*    @sad    @sau    @s!    @s@    @s#    @s$    _    _                         _    _    _
;;  _    _    _    _    @l_dh    _    _    _    _    _    _    _    _               _         _    _    _    _
;;  _    _    _              _                   _    _    _    _          _    _    _    _    _
;;)
;;(deflayer numbers
;;  _    _    _    _    _    _    nlk  kp7  kp8  kp9  _    _    _    _
;;  _    _    C-S-tab C-tab _ XX  _    kp4  kp5  kp6  min  _    _    _
;;  _    _    C-z  C-y  M-tab XX  _    kp1  kp2  kp3  +    _    _
;;  _    C-z  C-x  C-c  C-v  XX   _    kp0  kp0  .    /    _
;;  _    _    _              _              _    _    _
;;)


(deflayer numbers
  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    _    kp7  kp8  kp9  min  _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    kp0  kp4  kp5  kp6  +    _    _                         _    _    _
  _    _    _    _    _    _    _    nlk  kp1  kp2  kp3  /    _    _               _         _    _    _    
  _    _    _              _                   _    _    _    _          _    _    _    _    _
)

(deflayer sym
  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    @sau    @sad    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    @s&  @s!  @s@  @s#  @s$  _    _                         _    _    _
  _    _    _    _    _    _    _    @s~  @s^  @s%  @s*  @l_qw   _    _    _               _         _    _
  _    _    _              _                   _    _    _    _          _    _    _    _    _
)

(deflayer qsym
  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    @sau    @sad    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    @s&  @s!  @s@  @s#  @s$  _    _                         _    _    _
  _    _    _    _    _    _    _    @s~  @s^  @s%  @s*  @l_dh   _    _    _               _         _    _
  _    _    _              _                   _    _    _    _          _    _    _    _    _
)
